When would you want to use a remote repository rather than keeping all your work
local?

	- When collaborating with other people in a project and need to publish my finished work.
	- When I want to share some of my work with other people to discuss or ask for help if stacked.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

	Auto-pull may cause a "merge conflict" in our work. Also we may loose data if the auto-pull
	takes place while our working space contains uncommited changes.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Fork: the process of coping somebody's remote (GitHub) repository in your GitHub account.
		  A link to the original account is created so everyone knows who the original creator is.
		  Never the less you are able to make your own changes to the forked repository without
		  affecting the original one.

	Clone: the process of coping a remote or local repository to you local computer. Future changes will be 
		   present only locally for the clone.
		   
	Branch: is a part of a non linear commit history. It begins from a labeled commit and goes back 
			to the initial commit.
		   
	
What is the benefit of having a copy of the last known state of the remote
stored locally?

    Having a copy of the last known remote state stored locally is beneficial. This way you can:
		- Keep track of the project development. Be in sync with the work of your collegues (maybe different branches).
		- Collaborate remotely with other people by working together on the development of the same branch (ex. a feature).
		  through a succession of pulls, local developments and pushes.
		- Get/Give help to other co-workers.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Collaborating with Git of GitHub has many benefits.
		- It is easy to keep keep track of different versions rather than undoing changes.
		- It is easy to collaborate with more than one co-workers on a file simultaneously or on a banch of different files.
		- Saves a lot of time from messaging, mailing or phone calling in order to explain what you changed.
		- Makes merging possible, safer and time efficient (not a time devouring scrapy copy paste task).
		- Protection and tracking of actions among a big team of people.
	
	Also makes some things harder.
		- It is hard (at firt I hope) to grasp and cope with the mechanisms of Git.
		- It is quite sophisticated for a beginner and requires time and practice (but no pain no gain).
		- It is difficult for an intermediate to master it. So on a daily basis a user may finds it self spending some times
		  in forums or in man pages of Git rather than focusing on his work (but again nothing is for free)

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    I would want to make changes in a separate branch when working with other co-workers rather than working on the branch.
	Also when experimenting or adding a new feature locally I would create an other branch.