What happens when you initialize a repository? Why do you need to do it?

	When I initialize a repositoty the hidden directory .git shows up 
	and i get informed about it. At first non of the files include in 
	the directory are committed. I need to init a repository to start
	using git.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Staging area is a middle area between the working directory and the repository.
	The reason I'll use it is to keep all the necessary files for the next commit.

How can you use the staging area to make sure you have one commit per logical
change?

	To make sure I have one commit per logical change I can add one file per time in 
	my staging area. Also to validate this, I can use git diff --staged to see the 
	differences between the repository and the staging area.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	- Experiment with a stable version of your dode.
	- Develop a series of features with minor importance to merge later.
	- Develop different versions (language and/or features) of the same app.
	- Develop an expansion of the major app.

How do the diagrams help you visualize the branch structure?
	
	Diagramms help me visualize the branch structure in my current repository
	by showing all the relations between commits.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches toghether leads to a new commit with a label. This label
	is the name of one from the two parents (based on the merge we did). The merged
	branch has stored all commits from the branches and all their history. We represent
	the diagram this way to give the git user a more detailed view on how things developed.
	Also this representation is easier to cath.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

Auto-merge
	
	+ You don't have to inspect and compare the code each time. Very helpfull if 
	  a lot of changes have been made.
	- The results maybe are not wanted.
	
Always Manual Merge
	+ Have full control over all the changes and thus you are sure that the result 
	  of the merge is the wanted one.
	- Do all the job manually even if the merge is a simple one with no conflicts. 
