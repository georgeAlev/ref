How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    diff was very helpfull because compared the files for me. Then presented me 
	only the key differences between them. So, while in the old version were 
	using the up button, in the new version we used the button spracr which 
	seemed a little odd and then I just realized it was a typo.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

		I think that access to the entire history of a file helps you track down 
	all the changes taking place through out the process of development. 
	Following an idea that doesn't lead to the wanted behavior in your code 
	can be reversed by simply choosing an old solid version in one command step
	(no need to undo manually all the last changes to get back there). That 
	makes me think of me in the long term as a more flexible developer that can:
		1) change directions till I find the right way in my code
		2) be prone to test with my code
		3) have no fear in losing my project's stability
		4) compare old and new versions of my project

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

	Manual commit:
    + You commit when a logical change takes place, so you are sure that there 
	  is some kind of substantive difference not just some few more lines of code.
	+ Use critical thinking on when to commit. That's good for thinking in general
	  but most important helps you stay focused on meeting and commiting a specific target. 
	- You may misjudge when is the right time to commit because you may 
	  misinterpret the 'commit per logical change' rule and end up with many small commits.
	
	Auto save:
	+ No way you loosing any piece of job
	+ Never think and worry about saving your current work. It is conviniently saved for you.
	- Auto save policies like regular time intervals, large changes or pause 
	  while editing may not capture real improvements or features' development.
	- Highly possible to end up with many old versions that have little differences
	  and mainly are the same (no new features). So, it is difficult to choose which
	  old version to restore.
	  

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

		Git and other similar version control systems save multiple files in one commit 
	because in many programming projects a banch files are logicaly connected. So changes
	in one file may lead to changes in  another or more interconnected file(s). So we need to
	to save it(them) too.
		Other systems like Google Docs don't aim for programming projects and may treat their 
	files as separate in concern of ease.
	
How can you use the commands git log and git diff to view the history of files?

		I can use git log to view the entire versions' history of my files, and git log --stat
	for some more details such us number of lines that changed (ins/del) after the previous
	commit. git log is like ls for versions :)
		On the other hand I can use git diff to compare two different versions and get inforamtion
	about their inserted or deleted lines.
	

How might using version control make you more confident to make changes that
could break something?

    Using version control makes me feel more confident to make changes in 'fragile' parts
	because with a right commit I always have a solid version of code to switch to.
	
Now that you have your workspace set up, what do you want to try using Git for?

    I think i would like to keep on learning and using github in order to manage my code more
	efficiently. With Git I may never worry about comparing manually my files when processing 
	different versions of files in my projects. As a matter of fact maybe this gives me the chance 
	to improve some exisiting progects without fearing of loosing the stability of my code.
	
